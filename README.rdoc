= eco_apps_support

eco_apps_support contains a set of utils/extensions/helpers/ based on rails3, making rails development easier and life happier.
eco_apps_support is independent on other eco_apps gems and js related helpers are built on jquery.

= Key URLs

Git/Issues: http://github.com/eleutian/eco_apps_support

Blog: http://developer.idapted.com

= Documentation

== Extensions

=== ActiveRecord

==== dom_id
dom_id(prefix = "")

  article = Article.find(1)
  article.dom_id # => "article_1"
  article.dom_id("list") # => "list_article_1"

==== day_condition_for
day_condition_for(day, column = "created_at")
Construct sql for day conditions.

  Article.day_condition_for("2010-12-01", "published_at")

==== days_between
days_between(from, to, ignore_weekend = false)

  Article.days_between(Time.now, Time.now + 5.days) # => 5
  Article.find(1).days_between("2010-12-01", "2010-12-06", true) # => 3

==== convert_tz
convert_tz(column_name, format="%Y-%m-%d")
Format sql date.

  Article.all(:conditions => "#{convert_tz(:created_at, "%H")} > 18") # Find records created after 6pm.

==== find_column_by_name
find_column_by_name(column_name)

  Article.find_column_by_name(:created_at).type # => :datetime

=== Fixnum

==== to_formatted_time
to_formatted_time(with_second = true)

  30.to_formatted_time # => "0:30"
  1000.to_formatted_time # => "16:40"
  10000.to_formatted_time # => "2:46:40"
  10000.to_formatted_time(false) # => "2:46"

to_time_zone

  8.to_time_zone.name # => "Beijing"

=== String

==== to_html

  "Hello\nWorld".to_html # => "<p>Hello\n<br />World</p>"

This method can be extended by block or defining subclass of StringFormatter

  "Hello\nWorld".to_html{|t| t.gsub(/o/,"i")} # => "<p>Helli\n<br />Wirld</p>"

  class MyFormatter < StringFormatter
    def class.format(str)
      str.gsub(/Hello/,"Hi")
    end
  end
  "Hello\nWorld".to_html # => "<p>Hi\n<br />Wirld</p>"